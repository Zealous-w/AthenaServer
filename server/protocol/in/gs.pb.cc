// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gs {
class S2G_RegisterServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2G_RegisterServer> {
} _S2G_RegisterServer_default_instance_;
class G2S_RegisterServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<G2S_RegisterServer> {
} _G2S_RegisterServer_default_instance_;

namespace protobuf_gs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2G_RegisterServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2G_RegisterServer, sid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2S_RegisterServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2S_RegisterServer, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2S_RegisterServer, sid_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(S2G_RegisterServer)},
  { 6, -1, sizeof(G2S_RegisterServer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2G_RegisterServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_G2S_RegisterServer_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _S2G_RegisterServer_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _G2S_RegisterServer_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _S2G_RegisterServer_default_instance_.DefaultConstruct();
  _G2S_RegisterServer_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\010gs.proto\022\002gs\"!\n\022S2G_RegisterServer\022\013\n\003"
      "sid\030\001 \001(\r\".\n\022G2S_RegisterServer\022\013\n\003ret\030\001"
      " \001(\r\022\013\n\003sid\030\002 \001(\r*N\n\007ProtoID\022\013\n\007ID_NULL\020"
      "\000\022\032\n\025ID_S2G_RegisterServer\020\221N\022\032\n\025ID_G2S_"
      "RegisterServer\020\222Nb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gs.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gs_2eproto

const ::google::protobuf::EnumDescriptor* ProtoID_descriptor() {
  protobuf_gs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_2eproto::file_level_enum_descriptors[0];
}
bool ProtoID_IsValid(int value) {
  switch (value) {
    case 0:
    case 10001:
    case 10002:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2G_RegisterServer::kSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2G_RegisterServer::S2G_RegisterServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs.S2G_RegisterServer)
}
S2G_RegisterServer::S2G_RegisterServer(const S2G_RegisterServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sid_ = from.sid_;
  // @@protoc_insertion_point(copy_constructor:gs.S2G_RegisterServer)
}

void S2G_RegisterServer::SharedCtor() {
  sid_ = 0u;
  _cached_size_ = 0;
}

S2G_RegisterServer::~S2G_RegisterServer() {
  // @@protoc_insertion_point(destructor:gs.S2G_RegisterServer)
  SharedDtor();
}

void S2G_RegisterServer::SharedDtor() {
}

void S2G_RegisterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2G_RegisterServer::descriptor() {
  protobuf_gs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2G_RegisterServer& S2G_RegisterServer::default_instance() {
  protobuf_gs_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2G_RegisterServer* S2G_RegisterServer::New(::google::protobuf::Arena* arena) const {
  S2G_RegisterServer* n = new S2G_RegisterServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2G_RegisterServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gs.S2G_RegisterServer)
  sid_ = 0u;
}

bool S2G_RegisterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs.S2G_RegisterServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs.S2G_RegisterServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs.S2G_RegisterServer)
  return false;
#undef DO_
}

void S2G_RegisterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs.S2G_RegisterServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs.S2G_RegisterServer)
}

::google::protobuf::uint8* S2G_RegisterServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gs.S2G_RegisterServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs.S2G_RegisterServer)
  return target;
}

size_t S2G_RegisterServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs.S2G_RegisterServer)
  size_t total_size = 0;

  // uint32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2G_RegisterServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs.S2G_RegisterServer)
  GOOGLE_DCHECK_NE(&from, this);
  const S2G_RegisterServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2G_RegisterServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs.S2G_RegisterServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs.S2G_RegisterServer)
    MergeFrom(*source);
  }
}

void S2G_RegisterServer::MergeFrom(const S2G_RegisterServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs.S2G_RegisterServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void S2G_RegisterServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs.S2G_RegisterServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2G_RegisterServer::CopyFrom(const S2G_RegisterServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs.S2G_RegisterServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2G_RegisterServer::IsInitialized() const {
  return true;
}

void S2G_RegisterServer::Swap(S2G_RegisterServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2G_RegisterServer::InternalSwap(S2G_RegisterServer* other) {
  std::swap(sid_, other->sid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2G_RegisterServer::GetMetadata() const {
  protobuf_gs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2G_RegisterServer

// uint32 sid = 1;
void S2G_RegisterServer::clear_sid() {
  sid_ = 0u;
}
::google::protobuf::uint32 S2G_RegisterServer::sid() const {
  // @@protoc_insertion_point(field_get:gs.S2G_RegisterServer.sid)
  return sid_;
}
void S2G_RegisterServer::set_sid(::google::protobuf::uint32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:gs.S2G_RegisterServer.sid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int G2S_RegisterServer::kRetFieldNumber;
const int G2S_RegisterServer::kSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

G2S_RegisterServer::G2S_RegisterServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs.G2S_RegisterServer)
}
G2S_RegisterServer::G2S_RegisterServer(const G2S_RegisterServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:gs.G2S_RegisterServer)
}

void G2S_RegisterServer::SharedCtor() {
  ::memset(&ret_, 0, reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(sid_));
  _cached_size_ = 0;
}

G2S_RegisterServer::~G2S_RegisterServer() {
  // @@protoc_insertion_point(destructor:gs.G2S_RegisterServer)
  SharedDtor();
}

void G2S_RegisterServer::SharedDtor() {
}

void G2S_RegisterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* G2S_RegisterServer::descriptor() {
  protobuf_gs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const G2S_RegisterServer& G2S_RegisterServer::default_instance() {
  protobuf_gs_2eproto::InitDefaults();
  return *internal_default_instance();
}

G2S_RegisterServer* G2S_RegisterServer::New(::google::protobuf::Arena* arena) const {
  G2S_RegisterServer* n = new G2S_RegisterServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void G2S_RegisterServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gs.G2S_RegisterServer)
  ::memset(&ret_, 0, reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(sid_));
}

bool G2S_RegisterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs.G2S_RegisterServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs.G2S_RegisterServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs.G2S_RegisterServer)
  return false;
#undef DO_
}

void G2S_RegisterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs.G2S_RegisterServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // uint32 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs.G2S_RegisterServer)
}

::google::protobuf::uint8* G2S_RegisterServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gs.G2S_RegisterServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // uint32 sid = 2;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs.G2S_RegisterServer)
  return target;
}

size_t G2S_RegisterServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs.G2S_RegisterServer)
  size_t total_size = 0;

  // uint32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ret());
  }

  // uint32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void G2S_RegisterServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs.G2S_RegisterServer)
  GOOGLE_DCHECK_NE(&from, this);
  const G2S_RegisterServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const G2S_RegisterServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs.G2S_RegisterServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs.G2S_RegisterServer)
    MergeFrom(*source);
  }
}

void G2S_RegisterServer::MergeFrom(const G2S_RegisterServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs.G2S_RegisterServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void G2S_RegisterServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs.G2S_RegisterServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void G2S_RegisterServer::CopyFrom(const G2S_RegisterServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs.G2S_RegisterServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool G2S_RegisterServer::IsInitialized() const {
  return true;
}

void G2S_RegisterServer::Swap(G2S_RegisterServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void G2S_RegisterServer::InternalSwap(G2S_RegisterServer* other) {
  std::swap(ret_, other->ret_);
  std::swap(sid_, other->sid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata G2S_RegisterServer::GetMetadata() const {
  protobuf_gs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// G2S_RegisterServer

// uint32 ret = 1;
void G2S_RegisterServer::clear_ret() {
  ret_ = 0u;
}
::google::protobuf::uint32 G2S_RegisterServer::ret() const {
  // @@protoc_insertion_point(field_get:gs.G2S_RegisterServer.ret)
  return ret_;
}
void G2S_RegisterServer::set_ret(::google::protobuf::uint32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:gs.G2S_RegisterServer.ret)
}

// uint32 sid = 2;
void G2S_RegisterServer::clear_sid() {
  sid_ = 0u;
}
::google::protobuf::uint32 G2S_RegisterServer::sid() const {
  // @@protoc_insertion_point(field_get:gs.G2S_RegisterServer.sid)
  return sid_;
}
void G2S_RegisterServer::set_sid(::google::protobuf::uint32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:gs.G2S_RegisterServer.sid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gs

// @@protoc_insertion_point(global_scope)
